import { z } from 'zod';
export declare const GetConfigArgsSchema: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
export declare const GetConfigValueArgsSchema: z.ZodObject<{
    key: z.ZodString;
}, "strip", z.ZodTypeAny, {
    key: string;
}, {
    key: string;
}>;
export declare const SetConfigValueArgsSchema: z.ZodObject<{
    key: z.ZodString;
    value: z.ZodAny;
}, "strip", z.ZodTypeAny, {
    key: string;
    value?: any;
}, {
    key: string;
    value?: any;
}>;
export declare const UpdateConfigArgsSchema: z.ZodObject<{
    config: z.ZodRecord<z.ZodString, z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    config: Record<string, any>;
}, {
    config: Record<string, any>;
}>;
/**
 * Get the entire config
 */
export declare function getConfig(): Promise<{
    content: {
        type: string;
        text: string;
    }[];
}>;
/**
 * Get a specific config value
 */
export declare function getConfigValue(args: unknown): Promise<{
    content: {
        type: string;
        text: string;
    }[];
    isError: boolean;
} | {
    content: {
        type: string;
        text: string;
    }[];
    isError?: undefined;
}>;
/**
 * Set a specific config value
 */
export declare function setConfigValue(args: unknown): Promise<{
    content: {
        type: string;
        text: string;
    }[];
    isError: boolean;
} | {
    content: {
        type: string;
        text: string;
    }[];
    isError?: undefined;
}>;
/**
 * Update multiple config values at once
 */
export declare function updateConfig(args: unknown): Promise<{
    content: {
        type: string;
        text: string;
    }[];
    isError: boolean;
} | {
    content: {
        type: string;
        text: string;
    }[];
    isError?: undefined;
}>;
